#!/usr/bin/env python

import os
import sys
import re
import MySQLdb


# Globals.
sessionID = 1       # session ID to consider for all DB queries

def colify(stuff):
    """
    Given stuff, a list of strings, parse each string into columns,
    find the max width of each column, then return a list of
    formatted strings where the columns line up.  Only support:

    * left-justification
    * space-delimited
    * all lines must have same # tokens
    """
    colwidths = {}
    result = []
    for line in stuff:                  # each line
        toks = line.split()             # split into tokens
        for col in range(len(toks)):    # for each column (token)
            colwidths[col] = max(colwidths.get(col, 0), len(toks[col]))

    # Build format string.
    fmts = []
    keys = colwidths.keys()
    keys.sort()
    for c in keys:
        fmts.append("%%-%ds" % colwidths[c])
    fmt = " ".join(fmts)

    # Re-scan, formatting into max widths
    for line in stuff:
        toks = line.split()
        result.append(fmt % tuple(toks))

    return result


def sql1(sql):
    """
    Return single value from SQL query.
    """

    try:
        connection = openConnection()
        cursor = connection.cursor()
        n = cursor.execute(sql)
        res = cursor.fetchall()
        return res[0][0]        # 0th value from 0th row
    except Exception, e:
        sys.stdout.write("SQL failed: %s\n" % str(e))
        raise e


def efficiency():

    # Get a connection to the DB
    connection = openConnection()
    cursor = connection.cursor()


    # Get sim start date.
    start_mjd = sql1("select simEpoch + simStartDay from LsstConf where sessionID=%d" % sessionID)
#    runtime_days = sql1("select nRun * 365 from LsstConf where sessionID=%d" % sessionID)
    runtime_days = sql1("select max(date) / 86400 from TimeHistory where sessionID=%d" % sessionID)
    survey_time_sec = sql1("select sum(o.expTime+o.slewTime) from ObsHistory o where sessionID=%d" % sessionID)
    idle_time_sec = sql1("select sum(n.expEndTime-n.expStartTime) from NOBHist n where sessionID=%d" % sessionID) or 0;

    if start_mjd is None or runtime_days is None or idle_time_sec is None:
        sys.stdout.write("Could not retrieve runtime parameters.  Session is incomplete.\n");
        sys.exit(1)
    if survey_time_sec is None:
        sys.stdout.write("Could not retrieve survey runtime.  Session is incomplete.\n");
        sys.exit(1)
    dark_time_sec = survey_time_sec + idle_time_sec


    # Headers.
    print """\
Simulation Start Date: MJD %.5f
Simulation End Date: MJD %.5f
Simulation Run Time: %.5f days
Idle Time: %.2f sec
Dark Time: %.2f sec
""" % (start_mjd, start_mjd + runtime_days, runtime_days, idle_time_sec, dark_time_sec)

    do_colify = 1           # format tabular data into columns
    output = []             # output table
    output.append("Name/Type ID Fields Exp(sec) Overhead(sec) Total(sec) Eff(%) Surv(%) Dark(%) X<=0.5 X<=0.0")

    # Individual efficiencies
    sql = '''\
select p.propName, p.propConf, p.propID, 
sum(1),
sum(o.expTime), 
sum(o.slewTime), 
sum(o.expTime+o.slewTime), 
100 * sum(o.expTime) / sum(o.expTime+o.slewTime),
100 * sum(o.expTime+o.slewTime) / %f,
100 * sum(o.expTime+o.slewTime) / %f,
100 * sum(if(o.xparency <= 0.5, o.expTime, 0)) / %f,
100 * sum(if(o.xparency <= 0.0, o.expTime, 0)) / %f
from ObsHistory o, Proposal p
where o.propID=p.propID
and o.sessionID=%d
group by p.propID
order by p.propID
''' % (survey_time_sec, dark_time_sec, survey_time_sec, survey_time_sec, sessionID)

    n = cursor.execute(sql)
    rows = cursor.fetchall()
    for row in rows:
        # Hack up propConf field.
        conf = re.sub(r'^.*/', '', row[1])      # everything up through leading /
        conf = re.sub(r'\..*$', '', conf)       # everything after final .
        output.append("%s/%s %d %d %.2f %.2f %.2f %.2f%% %.2f%% %.2f%% %.2f%% %.2f%%" % ((conf, row[0]) + row[2:]))

    # Total
    sql = '''\
select 'Total', '-', 
sum(1),
sum(o.expTime), 
sum(o.slewTime), 
sum(o.expTime+o.slewTime), 
100 * sum(o.expTime) / sum(o.expTime+o.slewTime),
100 * sum(o.expTime+o.slewTime) / %f,
100 * sum(o.expTime+o.slewTime) / %f,
100 * sum(if(o.xparency <= 0.5, o.expTime, 0)) / %f,
100 * sum(if(o.xparency <= 0.0, o.expTime, 0)) / %f
from ObsHistory o
where o.sessionID=%d
''' % (survey_time_sec, dark_time_sec, survey_time_sec, survey_time_sec, sessionID)

    n = cursor.execute(sql)
    rows = cursor.fetchall()
    for row in rows:
        if row[2] is not None:
            output.append("%s %s %d %.2f %.2f %.2f %.2f%% %.2f%% %.2f%% %.2f%% %.2f%%" % row)
        else:
            output.append("No data available for %s." % DBDB)
            do_colify = 0


    # Write output
    if do_colify:
        for line in colify(output):
            print line
    else:
        for line in output:
            print line

if __name__ == "__main__":
    if len(sys.argv) > 1:
        os.environ['DBDB'] = sys.argv[1]      # user specified DBDB as arg
    from LSSTDBInit import *
    efficiency()
