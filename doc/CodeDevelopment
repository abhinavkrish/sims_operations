Acceptable Practices when modifying Code or DB Tables
---------------------------------------------------
Prime rule: Don't modify the production environment until you have
            thoroughly tested your changes.  This requires that you setup
            a private parallel development environment for testing.


=============================================================================
Scenario 1: Single user on private workstation 
------------------------------------------------
Build a complete simulator installation on your local workstation.
Since you're the only user, you may modify the DB tables and code with 
impunity.

Use remote CVS access to the simulator CVS repository to acquire your 
development code.  Ensure that you do not 'cvs commit' back into the
production system until the code is thoroughly debugged.  

When you're ready to update the Production system, follow the detailed
instructions in 'Release Upgrade'. They are summarized below:
    If you altered any DB table during your modifications, then you *must* 
    1) update the Production DBs,  
    2) distribute the Production code to the cluster, and
    3) notify the users to update their 'cronos' environment immediately after 
       the code is commited to the repository;
    unless the entire simulation team has agreed otherwise.

    If you only modified the code, then you should notify the simulation team
    of the changes. The distribution into the Production environment can wait
    until the team decides to install a new release on the cluster.  


=============================================================================
Scenario 2: User on Shared System and User NOT modifying DB tables
-------------------------------------------------------------------
Extract a new development directory into a convenient location

    % mkdir ~/WorkingDirectory
    % cd ~/WorkingDirectory
    % cvs co LSST


Use your development environment to debug your changes

    You may now work with impunity in your private development arena. 

    Your CVS repository still refers to the Production source implementation 
    so ensure that you do not 'cvs commit' back into the production system 
    until the code is thoroughly debugged.

    Also, do NOT modify any DB table format since you are working on
    the 'live' Production database tables.


Merge your changes into the Production system

    Follow the detailed instructions in the document: ReleaseUpgrade.

    You should notify the simulation team of the imminent changes. The 
    distribution into the Production environment can wait until the team 
    decides to install a new release on the cluster.  


=============================================================================
Scenario 2: User on Shared System and User needing to modify DB tables
-----------------------------------------------------------------------
Create a parallel development system including a uniquely named development DB

    # Determine names of existing MySQL DB
    % find /data1/simulator/sw/mysql/data  -type d -print

    # Select a new DB name different from those displayed above
    % setenv DBDB DB_RAA_20050615

    # Using the existing LSST DB, create your private DB
    % cp -pr /data1/simulator/sw/mysql/data/LSST /data1/simulator/sw/mysql/data/$DBDB

    # Update your shell environment to reference your private DB 
    # in **each** window
    setenv DBDB DB_RAA_20050615

    # Update your shell startup script
    % edit ~/.cshrc
    .... modify  DBDB variable: setenv DBDB DB_RAA_20050615
    
    # Extract a new working directory, for convenience use matching DB name 
    % mkdir ~/$DBDB
    % cd ~/$DBDB
    % cvs co LSST


    # Reinitialize the non-static DB tables and remove temp files
    % cd ~/$DBDB/lsst/simulator/sql
    % mysql $DBDB
    > source BuildNewVolatile.sql;
    > show tables;
    > drop table <list all olap* tables separated by ','>;
    > quit

    For example: drop table OlapField_10_33,OlapField_12_41,OlapField_14_49;

    Note: Weather and Field data change so rarely, that I do not demonstrate
          how to update those tables.  Return to the original installation
          example for details on setting up new Fields and Weather.


Use your development environment to debug your changes

    You may now work with impunity in your private development arena. 
    If you need to alter a DB table layout, your changes will only affect your
    local development environment.

    Your CVS repository still refers to the Production source implementation 
    so ensure that you do not 'cvs commit' back into the production system 
    until the code is thoroughly debugged.


Merge your changes into the Production system

    When ready to upgrade Production, change the DB Name environment variable 
    to reference the production DB 
    % setenv DBDB LSST

    Then follow the detailed instructions in the document: ReleaseUpgrade,
    which are also summarized below.

    If you altered any DB table during your modifications, then you *must* 
    1) update the Production DBs to the new layout (see doc: ReleaseUpgrade)
    2) distribute the Production code to the cluster, and
    3) notify the users to update their 'cronos' environment immediately after 
       the code is commited to the repository;
    unless the entire simulation team has agreed otherwise.

    If you only modified the code, then you should notify the simulation team
    of the changes. The distribution into the Production environment can wait
    until the team decides to install a new release on the cluster.  

Note: Remember to switch the value of the environment variable $DBDB should 
      you want to switch between production and development DB tables.

