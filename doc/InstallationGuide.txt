
Observation Simulator Installation Guide

0. Introduction
The installation of the Observation Simulator is not particularly quick 
but it is pretty simple.

Few software requirements need to be satisfied. Those are listed in the
README.Requirements file. It is assumed that the user has installed all
the third party software packages needed to run the simulator.

Once the software requirements are satisfied, the simulator needs to be 
properly configured. This involves

0. Installing the LSST specific python site-packages
1. Creating the necessary database and database tables.
2. Populating the database tables.
3. Editing the relevant configuration files.

Each of these steps is described in detail in the following paragraphs.


0. The directory: "lsst/simulation/site-packages" contains python modules 
to install in the system's "python/lib/<python_version>/site-packages/"
directory. 

For example:
        cd /data1/simulator/sw/python/lib/python2.3/site-packages
        cp <$LSST>/lsst/simulator/site-packages/LSSTDBInit.py .
        mkdir SimPy
        cp <$LSST>/lsst/simulator/site-packages/SimPy/*.py SimPy/

1. Creating the necessary database and database tables.
The Observation Simulator expects a database and some tables to be 
already in place. For the time being the following requirements apply to
the database:

a. The database has to be a MySQL database.
b. The database name should be 'LSST' (without quotes).
c. The MySQL DBMS should define a user called 'www' with password 
   'zxcvbnm'
d. The 'LSST' database should be readable and writable for the user 
   'www'.
e. The 'LSST' database should be running on the localhost.

The requirements b, c and e can be changed by manually editing the 
DBHOST, DBPORT, DBDB, DBUSER and DBPASSWD constants in the file 
'lsst/simulator/site-packages/LSSTDBInit.py'.
As the Simulator writes data in the DBMS, requirement d cannot be 
lifted. Lifting requirement a is definitely possible, and would not 
require much work, but it would require some (trivial) code changes.

In the reminder of this document, the assumption is made that 
requirements a to e are going to be satisfied as written. The adaptation
of the following instruction to a customized setting is left as a 
trivial exercise to the reader.

1.1. Creation of the 'LSST' database and of user 'www'
Using the utilities supplied with the standard MySQL distribution, add a
user 'www' identified by password 'zxcvbnm' to the DBMS. Also create a
database called 'LSST'. More information on how to do this can be found
at

<http://dev.mysql.com/doc/mysql/en/mysqladmin.html>

and

<http://dev.mysql.com/doc/mysql/en/adding-users.html>

For example:
   mysqladmin -u root password 'zxcvbnm'
   mysql -u root -p
   -> create database LSST;
   -> grant all privileges on LSST.* to 'www'@'localhost' 
      identified by 'zxcvbnm' with grant option;
   -> flush privileges;
   -> quit;



1.2. Creation of the necessary database tables
Some setup SQL scripts ease the creation of the necessary database 
structure. these are located in $SIMULATOR_ROOT_DIR/sql

The 'BuildNewWeather.sql' script should be modified to 'source' all 
site-specific weather (cloud*.sql, seeing*.sql)  SQL scripts relating
to sites to be simulated. 

In order to create the table structure, start a mysql session (as user
'www' and using the 'LSST' database). Then, from the mysql prompt

	mysql> source timeHist.sql;
	mysql> source BuildNewVolatile.sql;
	mysql> source BuildNewWeather.sql;
	mysql> source field.sql;

What is left now is to populate the tables. This is done in three steps
using scripts in $SIMULATOR_ROOT_DIR/test:

	shell> cd $SIMULATOR_ROOT_DIR/test
	shell> ./ingestClaverSeeing<place>.py <place's seeing data>.dat
	shell> ./ingestClaverCloud<place>.py <place's cloud data>.txt

For example: 
	shell> ./ingestClaverSeeingPachon.py pachon_fwhm_2yr_300_050104.dat
	shell> ./ingestClaverCloudPachon.py pachon-cloud-94_050103.txt

        shell> ./ingestClaverSeeingLaPalma.py lapalma_fwhm_yr1_300_050106.dat
        shell> ./ingestClaverCloudLaPalma.py lapalma-cloud-03_050106.txt
      
        shell> ./ingestClaverSeeingMartir.py martir_fwhm_yr1_300_050107.dat
        shell> ./ingestClaverCloudMartir.py martir-cloud-94_050107.txt
       
        shell> ./ingestClaverSeeingCampanas.py campanas_fwhm_3yr_300_050121.dat
        shell> ./ingestClaverCloudCampanas.py campanas-cloud-94_050104.txt

        shell> ./ingestClaverCloudTololo.py 1996-2005_CloudTololo.txt
	shell> ./ingestClaverCloudTololoSD.py 1996-2005_SD_CloudTololo.txt
        shell> ./ingestClaverCloud3yrTololo.py 3yr_cloudTololo.txt
	shell> ./ingestClaverCloud3yrTololoSD.py 3yr_cloudTololoSD.txt
        shell> ./ingestClaverCloud2000Tololo.py 2000_CloudTololo.txt

for the weather data. 

For the target list, one needs to generate the appropriate list of RA and Dec 
values given a telescope FoV. The steps involved are compiling both the 
FieldGen and AddGalEcl tools, creating the tile list and then ingest the 
data into the database:

    shell> cd $SIMULATOR_ROOT_DIR/src/FieldGen
    shell> make FieldGen
    shell> make AddGalEcl
    shell> ./FieldGen -f <fov>  >  F_<fov>
    shell> ./AddGalEcl < F_<fov>  > F_<fov>.ingest
    shell> ../ingestTargetsByFov.py --fov=<fov> --fields=F_<fov>.ingest

where <fov> is the value if the instrument FoV in decimal degrees.


/***** NEW ******/
mysql> drop table Field;
mysql> source ../sql/field.sql;

unix> ../ingestTargetsByFov.py --fov=3.5 --fields=tessellationFields
/***** END *****/


/********* OLD **********/
    For example:
    shell> cd $SIMULATOR_ROOT_DIR/src/field
    shell> make FieldGen
    shell> make AddGalEcl
    shell> ./FieldGen -f 3.5  >  F_3.5
    shell> ./AddGalEcl < F_3.5  > F_3.5.ingest
    shell> ../ingestTargetsByFov.py --fov=3.5 --fields=radecgalecl.new
/***** END OF OLD *****/
