Set up DB Access parameters
---------------------------
Enter the following in your ~/.cshrc file:

    # LSST DB intialization parameters
    setenv DBHOST   ''
    setenv DBPORT   None
    setenv DBDB     'LSST'
    setenv DBUSER   'www'
    setenv DBPASSWD 'zxcvbnm'


Setup your default mysql login details. 
    % cp /dev/null ~/.my.cnf
    % chmod 700 ~/.my.cnf
    % cat > ~/.my.cnf           # following 3 lines exactly as shown
    [mysql]
    user=www
    password=zxcvbnm
    <control-D>

The above allows you to startup mysql on the command line via:
    % mysql LSST

instead of the usual
    % mysql -u www -p LSST



Set up CVS Access    
-------------------
Set up access to the remote CVS source repository; you must have an
account on cronos.tuc.noao.edu. See Kem about getting one.

You'll still do all your work on your local system but when you interact 
with CVS (source manager) you'll use a remote invocation. Edit and enter 
the following into your startup script.
                                                                                
Change <user> to your cronos account login:
                                                                                
    # LSST DB intialization parameters
    setenv DBHOST   ''
    setenv DBPORT   None
    setenv DBDB     'LSST'
    setenv DBUSER   'www'
    setenv DBPASSWD 'zxcvbnm'
     
    # LSST CVS REPOSITORY
    setenv CVS_RSH /usr/bin/ssh
    setenv CVSROOT ":ext:<user>@cronos.tuc.noao.edu:/data1/simulator/REPOSITORY"
                                                                                
    # LSST S/W
    # source /data1/simulator/bin/init.csh
                                                                                
                                                                                
Acquire the Simulator code
-----------------------------
Once you have the cronos account and the CVS defined in your .cshrc file--
                                                                                
    # extract the source directory: lsst
    cvs checkout lsst

    # make a convenience symlink to the source
    ln -s lsst/simulator/src toSrc

    # move to the source directory
    cd toSrc


Configure the Simulator Parameters as desired
------------------------------------------------
    #look over the configuration files
    ls *.conf | grep -v Prod         # Prod versions are out-of-date -- ignore
                                                                                
    LSST.conf               primary configuration for simulator-wide params
    AstronomicalSky.conf    defines params relating to astronomical calculations    Filters.conf            defines filter characteristics
    Instrument.conf         defines instrument characteristics
    Scheduler.conf          defines overall observing schedule of simulation
    SuperNovaProp.conf      parameters specific to Supernova Proposals
    WeakLensProp.conf       parameters specific to Weak Lensing  Proposals
    NearEarthProp.conf      parameters specific to Near Earth Asteroid Proposals    NOB.conf                defines non-observing blocks such as scheduled
                                maintenance, unsheduled downtimes, etc
                                                                                
There are explanatory comments in the configuration files for each parameter.
You may change the parameters as you desire. If there is an admonition to
avoid changing a param, heed it.  When the params are site specific--you'll
frequently find all sites listed but only the active site's value uncommented.
                                                                                
                                                                                
Run the Simulator
------------------
When you are ready to run the code (i.e. changed all params you want):
    cd ~/toSrc
    ./main.py
                                                                                
A few comments will print to the screen so you can track progress. Most
comments will be loaded into a file: lsst.log_<#>  where # is the session ID
automatically generated on startup and printed to the screen.
                                                                                

Check Simulation Progress
--------------------------
There are a couple of real-time status monitors. 
There is a graphical monitor (written by Phil Pinto) which pops up a second 
display containing the graphics. Sometimes the graphics doesn't pop up so 
at the '>>>'  you should type: 'plot'.  If you type something it doesn't know, 
it prints a help summary.  
                                                                                
    cd ~/toSrc
    ../viz/newextract <sid> 
                                                                                
Francisco wrote a displayer which parses the lsst.log_<sid> file.
    cd ~/toSrc/
    ./report <sid>

To view the field selection over time, use Phil Pinto's newbri tool which 
displays the fields selected in 2 hour increments:
    cd ~/toSrc
    % ../viz/newbri.py <sid>

                                                                                
MYSQL Help
-----------
The file lsst/simulator/doc/MySqlUse contains some handy commands if you're 
new to SQL programming and LSST DB data tables. 


Using the MYSQL DB tables directly
------------------------------------
MYSQL is the database manager in use.  The login and password are open.
    mysql -u www -p LSST
    pswd: zxcvbnm
                                                                                
    show tables;
    describe table LsstConf;
    describe table ObsHistory;
    select * from ObsHistory where sessionID=2 limit 100;
    ...
    quit;
                                                                                

